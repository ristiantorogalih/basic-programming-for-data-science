1,2,6
retail_clean2
#cara 2
retail_clean2<-subset(x=retail, select = -c(1,2,6))
retail_clean2
summary(retail_clean)
retail_clean$Category<-as.factor(retail_clean$Category)
summary(retail_clean)
retail_clean$Sub.Category<-as.factor(retail_clean$Sub.Category)
summary(retail_clean)
retail_clean$Category<-as.factor(retail_clean$Category)
retail_clean$Sub.Category<-as.factor(retail_clean$Sub.Category)
retail_clean$Product.Name<-as.factor(retail_clean$Product.Name)
summary(retail_clean)
retail_clean
retail_clean[,"Discount"]
retail_clean[retail_clean$Discount==0.2]
retail_clean[retail_clean$Discount==0.2] ,
retail_clean[retail_clean$Discount==0.2,]
retail_clean[retail_clean$Profit<0,]
retail_clean[retail_clean$Profit>0,]
summary(retail_clean[retail_clean$Profit<0,] )
summary(retail_clean[retail_clean$Profit>0,] )
summary(retail_clean[retail_clean$Profit<=0,] )
summary(retail_clean[retail_clean$Profit>0 && retail_clean$Discount>0,] )
summary(retail_clean[retail_clean$Profit>0 & retail_clean$Discount>0,] )
summary(retail_clean[retail_clean$Profit>0 | retail_clean$Discount>0,] )
summary(retail_clean[retail_clean$Profit>0 & retail_clean$Discount>0,] )
summary(retail_clean[retail_clean$Category=="Office Supplies" | retail_clean$Segment=="Consumer",] )
retail_2016<-retail_clean[retail_clean$Order.Date>="2016-01-01" && retail_clean$Order.Date<"2017-01-01"]
retail_2016
#cara 2
retail_clean[format(retail_clean$Order.Date, format="%Y")==2016]
#cara 2
retail_clean[format(retail_clean$Order.Date, format="%Y")==2016,]
#cara 1
retail_2016<-retail_clean[retail_clean$Order.Date>="2016-01-01" && retail_clean$Order.Date<"2017-01-01"]
retail_2016
#cara 1
retail_2016<-retail_clean[retail_clean$Order.Date>="2016-01-01" & retail_clean$Order.Date<"2017-01-01"]
#cara 1
retail_2016<-retail_clean[retail_clean$Order.Date>="2016-01-01" & retail_clean$Order.Date<"2017-01-01",]
retail_2016
nrow(retail_clean) # untuk mengekstrak jumlah rows
ncol(retail_clean) # untuk mengekstrak jumlah kolom
knitr::opts_chunk$set(echo = TRUE)
retail2 <- read.csv(file = "D:/Algoritma/Sitta/P4DS/data_input/retail.csv")
retail2
retail2 <- read.csv(file = "D:/Algoritma/Sitta/P4DS/data_input/retail.csv")
knitr::opts_chunk$set(echo = TRUE)
summary(retail_clean)
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(store=c("Jakarta","Bandung","Surabaya"), sales=c(1000,2000,3000), revenue=c(150,210,500))
df
class(df)
getwd()
# cara 1 -> relative path
retail <- read.csv(file = "data_input/retail.csv", sep = ",")
retail
# cara 2 -> full path
retail2 <- read.csv(file = "E:/workspace/TRAINING ALGORITMA/DAY 1/online/P4DS/data_input/retail.csv", sep = ",")
retail2
names(retail) #info nama kolom
length(retail) # jumlah kolom
dim(retail) # dimensi
head(x = retail, n = 10) #top n
tail(x = retail, n = 2) #least n
str(retail)
retail$Order.Date<-as.Date(retail$Order.Date, format = "%m/%d/%y")
retail
retail$Ship.Date<-as.Date(retail$Ship.Date, format = "%m/%d/%y")
retail
retail$Ship.Mode <- as.factor(retail$Ship.Mode)
retail$Segment <- as.factor(retail$Segment)
retail
head(retail)
retail[1:6, ] #[<baris>,<kolom>]
#cara 1
retail[c(1,5,7,10),c(1,5)]
#cara 2
retail[c(5:10,25:30),c("Ship.Mode","Profit")]
#cara 1
retail_clean <- retail[,-c(1,2,6)]
retail_clean
#cara 2
retail_clean2<-subset(x=retail, select = -c(1,2,6))
retail_clean2
retail_clean$Category<-as.factor(retail_clean$Category)
retail_clean$Sub.Category<-as.factor(retail_clean$Sub.Category)
retail_clean$Product.Name<-as.factor(retail_clean$Product.Name)
summary(retail_clean)
summary(retail_clean[retail_clean$Profit<=0,] )
summary(retail_clean[retail_clean$Profit>0,] )
summary(retail_clean[retail_clean$Profit>0 & retail_clean$Discount>0,] )
summary(retail_clean[retail_clean$Category=="Office Supplies" | retail_clean$Segment=="Consumer",] )
#cara 1
retail_2016<-retail_clean[retail_clean$Order.Date>="2016-01-01" & retail_clean$Order.Date<"2017-01-01",]
retail_2016
#cara 2
retail_clean[format(retail_clean$Order.Date, format="%Y")==2016,]
nrow(retail_clean) # untuk mengekstrak jumlah rows
ncol(retail_clean) # untuk mengekstrak jumlah kolom
# mengurutkan dari besar ke kecil
retail_clean
# mengurutkan dari besar ke kecil
retail_clean[order(retail_clean$Profit),]
# mengurutkan dari besar ke kecil
retail_clean[order(retail_clean$Profit, decreasing = TRUE),]
#cara 2
retail_clean[order(-retail_clean$Profit),]
# mengurutkan dari besar ke kecil
#cara 1
retail_clean[order(retail_clean$Profit, decreasing = TRUE),]
#cara 2
retail_clean[order(-retail_clean$Profit),]
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"),
levels = c("Low", "Med", "Hi"), ordered = TRUE),
x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9),
z = c(1, 1, 1, 2))
dd
dd[order(-dd[,4], dd[,1]), ]
# mengurutkan dari kecil ke besar
#cara 1
retail_clean[order(retail_clean$Profit, decreasing = FALSE),]
#cara 2
retail_clean[order(retail_clean$Profit),]
# mengurutkan dari besar ke kecil
#cara 1
retail_clean[order(retail_clean$Profit, decreasing = TRUE),]
bulan_genap <- c("February", "April", "June", "August", "October", "December")
bulan_genap <- c("February", "April", "June", "August", "October", "December")
bulan_genap
#derived kolom bulan dari order date
retail_clean
retail_clean$bulan <- months(x=retail_clean$Order.Date, abbreviate = F)
retail_clean
#2. subset data retail_clean untuk bulan genap
retail_clean[retail_clean$clean %in% bulan_genap,]
#2. subset data retail_clean untuk bulan genap
retail_clean[retail_clean$bulan %in% bulan_genap,]
#2. subset data retail_clean untuk bulan genap
retail_clean[retail_clean$bulan %in% bulan_genap,]
#3. subset data retail_clean untuk bulan ganjil
retail_clean[!retail_clean$bulan %in% bulan_genap,]
#2. subset data retail_clean untuk bulan genap
retail_clean[retail_clean$bulan %in% bulan_genap,]
bulan_genap <- c("February", "April", "June", "August", "October", "December", "December")
bulan_genap
#step
#1. derived kolom bulan dari order date
retail_clean
retail_clean$bulan <- months(x=retail_clean$Order.Date, abbreviate = F)
retail_clean
#2. subset data retail_clean untuk bulan genap
retail_clean[retail_clean$bulan %in% bulan_genap,]
bulan_genap <- c("February", "April", "June", "August", "October", "December")
bulan_genap
#step
#1. derived kolom bulan dari order date
retail_clean
retail_clean$bulan <- months(x=retail_clean$Order.Date, abbreviate = F)
retail_clean
#2. subset data retail_clean untuk bulan genap
retail_clean[retail_clean$bulan %in% bulan_genap,]
#3. subset data retail_clean untuk bulan ganjil
retail_clean[!retail_clean$bulan %in% bulan_genap,]
retail_clean[!retail_clean$bulan %in% bulan_genap,]
retail_clean[!retail_clean$bulan != "Desember",]
# untuk ship.mode
table(retail_clean$Ship.Mode)
# untuk segment
table(retail_clean$Segment)
# untuk category
table(retail_clean$Category)
prop.table(table(retail_clean$Ship.Mode))
table(retail_clean$Ship.Mode, retail_clean$Category)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2)
table(retail_clean$Ship.Mode, retail_clean$Category, retail_clean$Sub.Category)
table(retail_clean$Ship.Mode, retail_clean$Category)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 1)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2)
table(retail_clean$Ship.Mode, retail_clean$Category)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 1)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2)
as.data.frame(prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2))
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 1)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 2)
prop.table(table(retail_clean$Ship.Mode, retail_clean$Category),
margin = 1)
retail_clean$Profitable <- ifelse(test = retail_clean$Profit >0, yes = "Profitable", no = "Non Profitable")
retail_clean
retail_clean[retail_clean$Sales > 1000]
retail_clean[retail_clean$Sales > 1000,]
table(retail_clean[retail_clean$Sales > 1000,])
retail_1000 <- retail_clean[retail_clean$Sales > 1000,]
table(retail_1000$Segment, retail_1000$Category)
retail_clean[retail_clean$Ship.Mode=="First Class",]
retail_2 <- retail_clean[retail_clean$Ship.Mode=="First Class",]
table(retail_2$Category)
table.prop(retail_2$Category)
table.props(retail_2$Category)
prop.table(retail_2$Category)
prop.table(table(retail_2$Category)
prop.table(table(retail_2$Category))
table(retail_2$Category)
prop.table(table(retail_2$Category))
retail_1000 <- retail_clean[retail_clean$Sales >= 1000,]
table(retail_1000$Segment, retail_1000$Category)
prop.table(table(retail_2$Category, retail_2$Ship.Mode))
prop.table(table(retail_2$Category))
round(prop.table(table(retail_2$Category)))
round(prop.table(table(retail_2$Category)),2)
retail_clean[retail_clean$Sales >= 1000
retail_1000 <- retail_clean[retail_clean$Sales >= 1000,]
retail_1000 <- retail_clean[retail_clean$Sales >= 1000,]
table(retail_1000$Segment, retail_1000$Category)
sample(1:13,1)
sample(1:13,1)
sample(1:13,1)
sample(1:13,2)
sample(1:13,1)
sample(1:13,1)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
sample(1:13,1)
sample(1:13,1)
set.seed(10)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
set.seed(10)
sample(1:13,1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
RNGkind(sample.kind = "Rounding")
set.seed(10)
sample(1:13, 1)
xtabs(formula = Profit ~ Sub.Category+ Category, data= retail_clean)
as.data.frame(xtabs(formula = Profit ~ Sub.Category+ Category, data= retail_clean))
xtabs(formula = Profit ~ Sub.Category+ Category, data= retail_clean
xtabs(formula = Profit ~ Sub.Category+ Category, data= retail_clean
xtabs(formula = Profit ~ Sub.Category+ Category, data= retail_clean)
as.data.frame(xtabs(formula = Profit ~ Ship.Mode+ Category, data= retail_clean))
xtabs(formula = Profit ~ Ship.Mode+ Category, data= retail_clean)
as.data.frame(xtabs(formula = Profit ~ Ship.Mode+ Category, data= retail_clean))
plot(xtabs(formula = Profit ~ Ship.Mode+ Category, data= retail_clean))
aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = max)
aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = sum)
retail_agg<-aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = sum)
retail_agg[order(retail_agg$Profit)]
retail_agg[order(retail_agg$Profit),]
retail_agg[order(retail_agg$Profit, decreasing = TRUE),]
retail_agg<-aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = mean)
retail_agg[order(retail_agg$Profit, decreasing = TRUE),]
retail_agg<-aggregate(Profit, Sales ~ Ship.Mode+ Category, data = retail_clean, FUN = mean)
retail_agg<-aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = mean)
retail_agg<-aggregate(Profit & Sales~ Ship.Mode+ Category, data = retail_clean, FUN = mean)
retail_agg[order(retail_agg$Profit, decreasing = TRUE),]
retail_agg<-aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = mean)
retail_agg<-aggregate(Profit ~ Ship.Mode+ Category, data = retail_clean, FUN = length)
retail_agg[order(retail_agg$Profit, decreasing = TRUE),]
penjumlahan<-function(val1, val2){
add<-val1+val2
add
}
penjumlahan(1,9)
penjumlahan(val1=1,val2=9)
install.packages("prettydoc")
install.packages("rmdformats")
install.packages("rmdformats")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
knitr::include_graphics("image/PS.png")
profit <- c(4000, 5000, 3500, 4500, 5500, 6500, 7500, 5500, 4800, 6800)
mean(profit)
profit2 <- c(4000, 5000, 3500, 4500, 5500, 6500, 7500, 5500, 4800, 300000)
# cari median
median(profit2)
mean(profit2)
hist(profit2, breaks = 50)
abline(v = mean(profit2), col = "red", lwd = 2)
abline(v = median(profit2), col = "blue", lwd = 2)
profit2 <- c(4000, 5000, 3500, 4500, 5500, 6500, 7500, 5500, 4800, 300000)
# cari nilai trim mean
summary(profit2)
mean(profit2, trim = 0.1)
most <- function(x){
as.character(names(sort(-table(x)))[1])
}
paket <- c("hemat1","hemat2","hemat1","hemat3","hemat2","hemat3","hemat3","hemat3", "hemat2", "hemat2")
# gunakan function most
most(paket)
# data
harga_A <- c(400,410,420,400,410,420,400,410,420,400,410,420,400)
harga_B <- c(130,430,650,540,460,320,380,550,650,470,330,140,270)
# rata-rata harga
mean(harga_A)
mean(harga_B)
# cari nilai variance
var(harga_A)
var(harga_B)
# data
luas_rumah <- c(100,100,90,90,90,100,100,90,100,100)
harga_sewa <- c(1,2,3,6,5,8,9,1,7,4) # dalam juta
# cek variance
var(luas_rumah)
var(harga_sewa)
saham_A <- c(1000,1200,1100,1400,1500,1450,1300,1250,1400,1500,2000,1900,1800,1750,1500,1900,1850,1000,1900, 1850)
saham_B <- c(1000,999,995,1001,990,1002,998,1001,1010,1012,1011,989,1012,1010,1013,995,994,990,1000,1015)
mean(saham_A)
sd(saham_A)
mean(saham_B)
sd(saham_B)
# import data
retail <- read.csv("data_input/workshop.csv")
range(retail$Sales)
summary(retail$Sales)
IQR(retail$Sales)
knitr::include_graphics("image/boxplot.png")
knitr::include_graphics("image/cov-f.png")
cov(saham_A, saham_B)
cor(saham_A, saham_B)
# scatter plot
# run seluruh code bersamaan
plot(saham_A, saham_B)
abline(lm(saham_B ~ saham_A),
col = 'red')
knitr::include_graphics("image/correlation.png")
# generate random data
set.seed(100)
saham_C <- rnorm(n = 20, mean = 1000, sd = 8)
saham_D <- sample(saham_B)
saham_E <- saham_A+50
saham <- data.frame(saham_A,saham_B,saham_C,saham_D,saham_E)
# inspect data
summary(saham)
# boxplot
boxplot(saham$saham_A)
boxplot(saham$saham_B)
boxplot(saham$saham_C)
boxplot(saham$saham_D)
boxplot(saham$saham_E)
# buat matriks korelasi data
cor(saham)
# install package di console:
# install.packages("GGally")
# load library:
library(GGally)
# visualisasi:
ggcorr(saham, label=T)
knitr::include_graphics("image/normal-distribution.jpg")
# density plot: 50 random data
# coba ubah 50 dengan angka lebih tinggi, distribusi akan semakin normal
x <-  rnorm(50,0,1)
plot(density(x))
P_non_delay<- 80/100
P_non_delay
#cara1
# menghitung z score
zscore<-(170-162)/7
zscore
# menghitung peluang kejadian
pnorm(zscore, lower.tail = F)
#cara2
pnorm(170, mean = 162, sd = 7, lower.tail = F)
pnorm(175, mean = 162, sd = 7, lower.tail = F)
pnorm(175, mean = 162, sd = 7, lower.tail = T)
pnorm(175, mean = 162, sd = 7, lower.tail = T)-
pnorm(165, mean = 162, sd = 7, lower.tail = T)
#luas area <175 - luas area <165
#atau
pnorm(165, mean = 162, sd = 7, lower.tail = F)-
pnorm(175, mean = 162, sd = 7, lower.tail = F)
#atau
1-pnorm(175, mean = 162, sd = 7, lower.tail = F)-pnorm(165, mean = 162, sd = 7, lower.tail = T)
SE<-22/sqrt(300)
SE
# tingkat kepercayaan 95%; margin error = 5%
# alpha/2 karena ada error dibagi 2 untuk data ekstrim atas dan bawah.
# alpha/2 = 0.025
0.05/2 #0.05 adalah margin error
z<-qnorm(0.025)
z
CI_bawah<- 96.5  - z*SE
CI_atas<- 96.5  + z*SE
CI_bawah
CI_atas
# cari Z-score
(995-1000)/30
# cari P-value
pnorm(995, mean = 1000, sd = 30, lower.tail = T)
# cari Z-score
# cari P-value
duration <- c(184, 181, 230, 169, 158, 204, 220, 197, 219, 223)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("Programming for Data Science.png")
TA <- "galih"
TA
Kursus <- c("Algoritma", "Data", "Science", 'Science')
Kursus
class(Kursus)
tinggi <- c(178,155.5,190,170.0)
tinggi
class(tinggi)
tinggi2 <- c(130L, 150L)
tinggi2
class(tinggi2)
logi <- c(TRUE, FALSE, TRUE)
logi
class(logi)
object<- c("string", 1, 1.5, TRUE)
object
class(object)
class(tinggi2)
tingginum <- as.numeric(tinggi2)
class(tingginum)
obj_list<-list(c(1,2,3),c("Newton","Night"))
obj_list
obj_list[1]
obj_list[[1]]
library(flexdashboard)
library(tidyverse)
library(plotly)
library(scales)
workers <- read_csv("data/jobs_gender.csv")
theme_algoritma <- readRDS("theme_algoritma.rds")
//theme_algoritma <- readRDS("theme_algoritma.rds")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(scales)
workers <- read_csv("data/jobs_gender.csv")
#theme_algoritma <- readRDS("theme_algoritma.rds")
workers <- workers %>%
drop_na(total_earnings_male, total_earnings_female) %>%
mutate(percent_male = 100 - percent_female)
workers_gap <- workers %>%
filter(year == 2016) %>%
group_by(major_category) %>%
summarise(
Male = mean(percent_male),
Female = mean(percent_female)
) %>%
ungroup() %>%
mutate(major_category = reorder(major_category, Male - Female)) %>%
pivot_longer(cols = -major_category) %>%
mutate(text = paste(name,":", round(value,2) ,"%"))
plot_gendergap <- ggplot(workers_gap, aes(value, major_category, text = text))+
geom_col(aes(fill = name))+
geom_vline(xintercept = 50, linetype = "dotted")+
labs(x = NULL, y= NULL, title = "US Labor Force Participation, 2016")+
theme(legend.position = "none") +
scale_x_continuous(labels = scales::unit_format(unit = "%"))+
theme_algoritma#
